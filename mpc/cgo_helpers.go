// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Mon, 19 Oct 2020 01:59:52 EEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package mpc

/*
#include "mpc_crypto.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// unpackPUint8_tString represents the data from Go string as *C.uint8_t and avoids copying.
func unpackPUint8_tString(str string) (*C.uint8_t, *cgoAllocMap) {
	h := (*stringHeader)(unsafe.Pointer(&str))
	return (*C.uint8_t)(h.Data), cgoAllocsUnknown
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// allocPMpccryptoshareMemory allocates memory for type *C.MPCCryptoShare in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPMpccryptoshareMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPMpccryptoshareValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfPMpccryptoshareValue = unsafe.Sizeof([1]*C.MPCCryptoShare{})

const sizeOfPtr = unsafe.Sizeof(&struct{}{})

// unpackArgSSMpccryptoshare transforms a sliced Go data structure into plain C format.
func unpackArgSSMpccryptoshare(x [][]Mpccryptoshare) (unpacked **C.MPCCryptoShare, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocPMpccryptoshareMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]*C.MPCCryptoShare)(unsafe.Pointer(h0))
	for i0 := range x {
		h := (*sliceHeader)(unsafe.Pointer(&x[i0]))
		v0[i0] = (*C.MPCCryptoShare)(h.Data)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (**C.MPCCryptoShare)(h.Data)
	return
}

// packSSMpccryptoshare reads sliced Go data structure out from plain C format.
func packSSMpccryptoshare(v [][]Mpccryptoshare, ptr0 **C.MPCCryptoShare) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfPtr]*C.MPCCryptoShare)(unsafe.Pointer(ptr0)))[i0]
		hxfc4425b := (*sliceHeader)(unsafe.Pointer(&v[i0]))
		hxfc4425b.Data = unsafe.Pointer(ptr1)
		hxfc4425b.Cap = 0x7fffffff
		// hxfc4425b.Len = ?
	}
}

// allocPMpccryptocontextMemory allocates memory for type *C.MPCCryptoContext in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPMpccryptocontextMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPMpccryptocontextValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfPMpccryptocontextValue = unsafe.Sizeof([1]*C.MPCCryptoContext{})

// unpackArgSSMpccryptocontext transforms a sliced Go data structure into plain C format.
func unpackArgSSMpccryptocontext(x [][]Mpccryptocontext) (unpacked **C.MPCCryptoContext, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocPMpccryptocontextMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]*C.MPCCryptoContext)(unsafe.Pointer(h0))
	for i0 := range x {
		h := (*sliceHeader)(unsafe.Pointer(&x[i0]))
		v0[i0] = (*C.MPCCryptoContext)(h.Data)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (**C.MPCCryptoContext)(h.Data)
	return
}

// packSSMpccryptocontext reads sliced Go data structure out from plain C format.
func packSSMpccryptocontext(v [][]Mpccryptocontext, ptr0 **C.MPCCryptoContext) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfPtr]*C.MPCCryptoContext)(unsafe.Pointer(ptr0)))[i0]
		hxf95e7c8 := (*sliceHeader)(unsafe.Pointer(&v[i0]))
		hxf95e7c8.Data = unsafe.Pointer(ptr1)
		hxf95e7c8.Cap = 0x7fffffff
		// hxf95e7c8.Len = ?
	}
}

// allocPMpccryptomessageMemory allocates memory for type *C.MPCCryptoMessage in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPMpccryptomessageMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPMpccryptomessageValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfPMpccryptomessageValue = unsafe.Sizeof([1]*C.MPCCryptoMessage{})

// unpackArgSSMpccryptomessage transforms a sliced Go data structure into plain C format.
func unpackArgSSMpccryptomessage(x [][]Mpccryptomessage) (unpacked **C.MPCCryptoMessage, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocPMpccryptomessageMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]*C.MPCCryptoMessage)(unsafe.Pointer(h0))
	for i0 := range x {
		h := (*sliceHeader)(unsafe.Pointer(&x[i0]))
		v0[i0] = (*C.MPCCryptoMessage)(h.Data)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (**C.MPCCryptoMessage)(h.Data)
	return
}

// packSSMpccryptomessage reads sliced Go data structure out from plain C format.
func packSSMpccryptomessage(v [][]Mpccryptomessage, ptr0 **C.MPCCryptoMessage) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfPtr]*C.MPCCryptoMessage)(unsafe.Pointer(ptr0)))[i0]
		hxff2234b := (*sliceHeader)(unsafe.Pointer(&v[i0]))
		hxff2234b.Data = unsafe.Pointer(ptr1)
		hxff2234b.Cap = 0x7fffffff
		// hxff2234b.Len = ?
	}
}

// allocMpc_crypto_share_info_tMemory allocates memory for type C.mpc_crypto_share_info_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocMpc_crypto_share_info_tMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfMpc_crypto_share_info_tValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfMpc_crypto_share_info_tValue = unsafe.Sizeof([1]C.mpc_crypto_share_info_t{})

// unpackArgSMpc_crypto_share_info_t transforms a sliced Go data structure into plain C format.
func unpackArgSMpc_crypto_share_info_t(x []Mpc_crypto_share_info_t) (unpacked *C.mpc_crypto_share_info_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocMpc_crypto_share_info_tMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.mpc_crypto_share_info_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.mpc_crypto_share_info_t)(h.Data)
	return
}

// packSMpc_crypto_share_info_t reads sliced Go data structure out from plain C format.
func packSMpc_crypto_share_info_t(v []Mpc_crypto_share_info_t, ptr0 *C.mpc_crypto_share_info_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfMpc_crypto_share_info_tValue]C.mpc_crypto_share_info_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewMpc_crypto_share_info_tRef(unsafe.Pointer(&ptr1))
	}
}

// allocMpc_crypto_context_info_tMemory allocates memory for type C.mpc_crypto_context_info_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocMpc_crypto_context_info_tMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfMpc_crypto_context_info_tValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfMpc_crypto_context_info_tValue = unsafe.Sizeof([1]C.mpc_crypto_context_info_t{})

// unpackArgSMpc_crypto_context_info_t transforms a sliced Go data structure into plain C format.
func unpackArgSMpc_crypto_context_info_t(x []Mpc_crypto_context_info_t) (unpacked *C.mpc_crypto_context_info_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocMpc_crypto_context_info_tMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.mpc_crypto_context_info_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.mpc_crypto_context_info_t)(h.Data)
	return
}

// packSMpc_crypto_context_info_t reads sliced Go data structure out from plain C format.
func packSMpc_crypto_context_info_t(v []Mpc_crypto_context_info_t, ptr0 *C.mpc_crypto_context_info_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfMpc_crypto_context_info_tValue]C.mpc_crypto_context_info_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewMpc_crypto_context_info_tRef(unsafe.Pointer(&ptr1))
	}
}

// allocMpc_crypto_message_info_tMemory allocates memory for type C.mpc_crypto_message_info_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocMpc_crypto_message_info_tMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfMpc_crypto_message_info_tValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfMpc_crypto_message_info_tValue = unsafe.Sizeof([1]C.mpc_crypto_message_info_t{})

// unpackArgSMpc_crypto_message_info_t transforms a sliced Go data structure into plain C format.
func unpackArgSMpc_crypto_message_info_t(x []Mpc_crypto_message_info_t) (unpacked *C.mpc_crypto_message_info_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocMpc_crypto_message_info_tMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.mpc_crypto_message_info_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.mpc_crypto_message_info_t)(h.Data)
	return
}

// packSMpc_crypto_message_info_t reads sliced Go data structure out from plain C format.
func packSMpc_crypto_message_info_t(v []Mpc_crypto_message_info_t, ptr0 *C.mpc_crypto_message_info_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfMpc_crypto_message_info_tValue]C.mpc_crypto_message_info_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewMpc_crypto_message_info_tRef(unsafe.Pointer(&ptr1))
	}
}

// allocBip32_info_tMemory allocates memory for type C.bip32_info_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocBip32_info_tMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfBip32_info_tValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfBip32_info_tValue = unsafe.Sizeof([1]C.bip32_info_t{})

// unpackArgSBip32_info_t transforms a sliced Go data structure into plain C format.
func unpackArgSBip32_info_t(x []Bip32_info_t) (unpacked *C.bip32_info_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocBip32_info_tMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.bip32_info_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.bip32_info_t)(h.Data)
	return
}

// packSBip32_info_t reads sliced Go data structure out from plain C format.
func packSBip32_info_t(v []Bip32_info_t, ptr0 *C.bip32_info_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfBip32_info_tValue]C.bip32_info_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewBip32_info_tRef(unsafe.Pointer(&ptr1))
	}
}
