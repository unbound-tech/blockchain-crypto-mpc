// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Mon, 19 Oct 2020 01:59:52 EEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package mpc

/*
#include "mpc_crypto.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Mpccrypto_freeshare function as declared in include/mpc_crypto.h:100
func Mpccrypto_freeshare(Share []Mpccryptoshare) {
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	C.MPCCrypto_freeShare(cShare)
	runtime.KeepAlive(cShareAllocMap)
}

// Mpccrypto_freecontext function as declared in include/mpc_crypto.h:101
func Mpccrypto_freecontext(Context []Mpccryptocontext) {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	C.MPCCrypto_freeContext(cContext)
	runtime.KeepAlive(cContextAllocMap)
}

// Mpccrypto_freemessage function as declared in include/mpc_crypto.h:102
func Mpccrypto_freemessage(Message []Mpccryptomessage) {
	cMessage, cMessageAllocMap := (*C.MPCCryptoMessage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Message)).Data)), cgoAllocsUnknown
	C.MPCCrypto_freeMessage(cMessage)
	runtime.KeepAlive(cMessageAllocMap)
}

// Mpccrypto_sharetobuf function as declared in include/mpc_crypto.h:105
func Mpccrypto_sharetobuf(Share []Mpccryptoshare, Out []byte, Out_size []int32) int32 {
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cOut, cOutAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out)).Data)), cgoAllocsUnknown
	cOut_size, cOut_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_shareToBuf(cShare, cOut, cOut_size)
	runtime.KeepAlive(cOut_sizeAllocMap)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_contexttobuf function as declared in include/mpc_crypto.h:106
func Mpccrypto_contexttobuf(Context []Mpccryptocontext, Out []byte, Out_size []int32) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cOut, cOutAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out)).Data)), cgoAllocsUnknown
	cOut_size, cOut_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_contextToBuf(cContext, cOut, cOut_size)
	runtime.KeepAlive(cOut_sizeAllocMap)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_messagetobuf function as declared in include/mpc_crypto.h:107
func Mpccrypto_messagetobuf(Message []Mpccryptomessage, Out []byte, Out_size []int32) int32 {
	cMessage, cMessageAllocMap := (*C.MPCCryptoMessage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Message)).Data)), cgoAllocsUnknown
	cOut, cOutAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out)).Data)), cgoAllocsUnknown
	cOut_size, cOut_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_messageToBuf(cMessage, cOut, cOut_size)
	runtime.KeepAlive(cOut_sizeAllocMap)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cMessageAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_sharefrombuf function as declared in include/mpc_crypto.h:110
func Mpccrypto_sharefrombuf(In string, In_size int32, Share [][]Mpccryptoshare) int32 {
	cIn, cInAllocMap := unpackPUint8_tString(In)
	cIn_size, cIn_sizeAllocMap := (C.int)(In_size), cgoAllocsUnknown
	cShare, cShareAllocMap := unpackArgSSMpccryptoshare(Share)
	__ret := C.MPCCrypto_shareFromBuf(cIn, cIn_size, cShare)
	packSSMpccryptoshare(Share, cShare)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cIn_sizeAllocMap)
	runtime.KeepAlive(cInAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_contextfrombuf function as declared in include/mpc_crypto.h:111
func Mpccrypto_contextfrombuf(In string, In_size int32, Context [][]Mpccryptocontext) int32 {
	cIn, cInAllocMap := unpackPUint8_tString(In)
	cIn_size, cIn_sizeAllocMap := (C.int)(In_size), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_contextFromBuf(cIn, cIn_size, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cIn_sizeAllocMap)
	runtime.KeepAlive(cInAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_messagefrombuf function as declared in include/mpc_crypto.h:112
func Mpccrypto_messagefrombuf(In string, In_size int32, Message [][]Mpccryptomessage) int32 {
	cIn, cInAllocMap := unpackPUint8_tString(In)
	cIn_size, cIn_sizeAllocMap := (C.int)(In_size), cgoAllocsUnknown
	cMessage, cMessageAllocMap := unpackArgSSMpccryptomessage(Message)
	__ret := C.MPCCrypto_messageFromBuf(cIn, cIn_size, cMessage)
	packSSMpccryptomessage(Message, cMessage)
	runtime.KeepAlive(cMessageAllocMap)
	runtime.KeepAlive(cIn_sizeAllocMap)
	runtime.KeepAlive(cInAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_shareinfo function as declared in include/mpc_crypto.h:115
func Mpccrypto_shareinfo(Share []Mpccryptoshare, Info []Mpc_crypto_share_info_t) int32 {
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cInfo, cInfoAllocMap := unpackArgSMpc_crypto_share_info_t(Info)
	__ret := C.MPCCrypto_shareInfo(cShare, cInfo)
	packSMpc_crypto_share_info_t(Info, cInfo)
	runtime.KeepAlive(cInfoAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_contextinfo function as declared in include/mpc_crypto.h:116
func Mpccrypto_contextinfo(Context []Mpccryptocontext, Info []Mpc_crypto_context_info_t) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cInfo, cInfoAllocMap := unpackArgSMpc_crypto_context_info_t(Info)
	__ret := C.MPCCrypto_contextInfo(cContext, cInfo)
	packSMpc_crypto_context_info_t(Info, cInfo)
	runtime.KeepAlive(cInfoAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_messageinfo function as declared in include/mpc_crypto.h:117
func Mpccrypto_messageinfo(Message []Mpccryptomessage, Info []Mpc_crypto_message_info_t) int32 {
	cMessage, cMessageAllocMap := (*C.MPCCryptoMessage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Message)).Data)), cgoAllocsUnknown
	cInfo, cInfoAllocMap := unpackArgSMpc_crypto_message_info_t(Info)
	__ret := C.MPCCrypto_messageInfo(cMessage, cInfo)
	packSMpc_crypto_message_info_t(Info, cInfo)
	runtime.KeepAlive(cInfoAllocMap)
	runtime.KeepAlive(cMessageAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_step function as declared in include/mpc_crypto.h:120
func Mpccrypto_step(Context []Mpccryptocontext, In []Mpccryptomessage, Out [][]Mpccryptomessage, Flags []uint32) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cIn, cInAllocMap := (*C.MPCCryptoMessage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&In)).Data)), cgoAllocsUnknown
	cOut, cOutAllocMap := unpackArgSSMpccryptomessage(Out)
	cFlags, cFlagsAllocMap := (*C.uint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Flags)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_step(cContext, cIn, cOut, cFlags)
	runtime.KeepAlive(cFlagsAllocMap)
	packSSMpccryptomessage(Out, cOut)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cInAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getshare function as declared in include/mpc_crypto.h:123
func Mpccrypto_getshare(Context []Mpccryptocontext, Share [][]Mpccryptoshare) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cShare, cShareAllocMap := unpackArgSSMpccryptoshare(Share)
	__ret := C.MPCCrypto_getShare(cContext, cShare)
	packSSMpccryptoshare(Share, cShare)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initrefreshkey function as declared in include/mpc_crypto.h:126
func Mpccrypto_initrefreshkey(Peer int32, Share []Mpccryptoshare, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initRefreshKey(cPeer, cShare, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initgenerateeddsakey function as declared in include/mpc_crypto.h:129
func Mpccrypto_initgenerateeddsakey(Peer int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initGenerateEddsaKey(cPeer, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initeddsasign function as declared in include/mpc_crypto.h:130
func Mpccrypto_initeddsasign(Peer int32, Share []Mpccryptoshare, In string, In_size int32, Refresh int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cIn, cInAllocMap := unpackPUint8_tString(In)
	cIn_size, cIn_sizeAllocMap := (C.int)(In_size), cgoAllocsUnknown
	cRefresh, cRefreshAllocMap := (C.int)(Refresh), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initEddsaSign(cPeer, cShare, cIn, cIn_size, cRefresh, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cRefreshAllocMap)
	runtime.KeepAlive(cIn_sizeAllocMap)
	runtime.KeepAlive(cInAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getresulteddsasign function as declared in include/mpc_crypto.h:131
func Mpccrypto_getresulteddsasign(Context []Mpccryptocontext, Signature []byte) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cSignature, cSignatureAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Signature)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_getResultEddsaSign(cContext, cSignature)
	runtime.KeepAlive(cSignatureAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_verifyeddsa function as declared in include/mpc_crypto.h:132
func Mpccrypto_verifyeddsa(Pub_key string, In string, In_size int32, Signature string) int32 {
	cPub_key, cPub_keyAllocMap := unpackPUint8_tString(Pub_key)
	cIn, cInAllocMap := unpackPUint8_tString(In)
	cIn_size, cIn_sizeAllocMap := (C.int)(In_size), cgoAllocsUnknown
	cSignature, cSignatureAllocMap := unpackPUint8_tString(Signature)
	__ret := C.MPCCrypto_verifyEddsa(cPub_key, cIn, cIn_size, cSignature)
	runtime.KeepAlive(cSignatureAllocMap)
	runtime.KeepAlive(cIn_sizeAllocMap)
	runtime.KeepAlive(cInAllocMap)
	runtime.KeepAlive(cPub_keyAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_geteddsapublic function as declared in include/mpc_crypto.h:133
func Mpccrypto_geteddsapublic(Share []Mpccryptoshare, Pub_key []byte) int32 {
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cPub_key, cPub_keyAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Pub_key)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_getEddsaPublic(cShare, cPub_key)
	runtime.KeepAlive(cPub_keyAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initgenerateecdsakey function as declared in include/mpc_crypto.h:136
func Mpccrypto_initgenerateecdsakey(Peer int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initGenerateEcdsaKey(cPeer, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initecdsasign function as declared in include/mpc_crypto.h:137
func Mpccrypto_initecdsasign(Peer int32, Share []Mpccryptoshare, In string, In_size int32, Refresh int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cIn, cInAllocMap := unpackPUint8_tString(In)
	cIn_size, cIn_sizeAllocMap := (C.int)(In_size), cgoAllocsUnknown
	cRefresh, cRefreshAllocMap := (C.int)(Refresh), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initEcdsaSign(cPeer, cShare, cIn, cIn_size, cRefresh, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cRefreshAllocMap)
	runtime.KeepAlive(cIn_sizeAllocMap)
	runtime.KeepAlive(cInAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getresultecdsasign function as declared in include/mpc_crypto.h:138
func Mpccrypto_getresultecdsasign(Context []Mpccryptocontext, Signature []byte, Out_size []int32) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cSignature, cSignatureAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Signature)).Data)), cgoAllocsUnknown
	cOut_size, cOut_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_getResultEcdsaSign(cContext, cSignature, cOut_size)
	runtime.KeepAlive(cOut_sizeAllocMap)
	runtime.KeepAlive(cSignatureAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_verifyecdsa function as declared in include/mpc_crypto.h:139
func Mpccrypto_verifyecdsa(Pub_key string, Pub_key_size int32, In string, In_size int32, Signature string, Signature_size int32) int32 {
	cPub_key, cPub_keyAllocMap := unpackPUint8_tString(Pub_key)
	cPub_key_size, cPub_key_sizeAllocMap := (C.int)(Pub_key_size), cgoAllocsUnknown
	cIn, cInAllocMap := unpackPUint8_tString(In)
	cIn_size, cIn_sizeAllocMap := (C.int)(In_size), cgoAllocsUnknown
	cSignature, cSignatureAllocMap := unpackPUint8_tString(Signature)
	cSignature_size, cSignature_sizeAllocMap := (C.int)(Signature_size), cgoAllocsUnknown
	__ret := C.MPCCrypto_verifyEcdsa(cPub_key, cPub_key_size, cIn, cIn_size, cSignature, cSignature_size)
	runtime.KeepAlive(cSignature_sizeAllocMap)
	runtime.KeepAlive(cSignatureAllocMap)
	runtime.KeepAlive(cIn_sizeAllocMap)
	runtime.KeepAlive(cInAllocMap)
	runtime.KeepAlive(cPub_key_sizeAllocMap)
	runtime.KeepAlive(cPub_keyAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getecdsapublic function as declared in include/mpc_crypto.h:140
func Mpccrypto_getecdsapublic(Share []Mpccryptoshare, Pub_key []byte, Pub_key_size []int32) int32 {
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cPub_key, cPub_keyAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Pub_key)).Data)), cgoAllocsUnknown
	cPub_key_size, cPub_key_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Pub_key_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_getEcdsaPublic(cShare, cPub_key, cPub_key_size)
	runtime.KeepAlive(cPub_key_sizeAllocMap)
	runtime.KeepAlive(cPub_keyAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initgenerategenericsecret function as declared in include/mpc_crypto.h:143
func Mpccrypto_initgenerategenericsecret(Peer int32, Bits int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cBits, cBitsAllocMap := (C.int)(Bits), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initGenerateGenericSecret(cPeer, cBits, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cBitsAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initimportgenericsecret function as declared in include/mpc_crypto.h:144
func Mpccrypto_initimportgenericsecret(Peer int32, Key string, Size int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cKey, cKeyAllocMap := unpackPUint8_tString(Key)
	cSize, cSizeAllocMap := (C.int)(Size), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initImportGenericSecret(cPeer, cKey, cSize, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cSizeAllocMap)
	runtime.KeepAlive(cKeyAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initbackupecdsakey function as declared in include/mpc_crypto.h:147
func Mpccrypto_initbackupecdsakey(Peer int32, Share []Mpccryptoshare, Pub_backup_key string, Pub_backup_key_size int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cPub_backup_key, cPub_backup_keyAllocMap := unpackPUint8_tString(Pub_backup_key)
	cPub_backup_key_size, cPub_backup_key_sizeAllocMap := (C.int)(Pub_backup_key_size), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initBackupEcdsaKey(cPeer, cShare, cPub_backup_key, cPub_backup_key_size, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cPub_backup_key_sizeAllocMap)
	runtime.KeepAlive(cPub_backup_keyAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getresultbackupecdsakey function as declared in include/mpc_crypto.h:148
func Mpccrypto_getresultbackupecdsakey(Context []Mpccryptocontext, Out []byte, Out_size []int32) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cOut, cOutAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out)).Data)), cgoAllocsUnknown
	cOut_size, cOut_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_getResultBackupEcdsaKey(cContext, cOut, cOut_size)
	runtime.KeepAlive(cOut_sizeAllocMap)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_verifyecdsabackupkey function as declared in include/mpc_crypto.h:149
func Mpccrypto_verifyecdsabackupkey(Pub_backup_key string, Pub_backup_key_size int32, Pub_key string, Pub_key_size int32, Backup string, Backup_size int32) int32 {
	cPub_backup_key, cPub_backup_keyAllocMap := unpackPUint8_tString(Pub_backup_key)
	cPub_backup_key_size, cPub_backup_key_sizeAllocMap := (C.int)(Pub_backup_key_size), cgoAllocsUnknown
	cPub_key, cPub_keyAllocMap := unpackPUint8_tString(Pub_key)
	cPub_key_size, cPub_key_sizeAllocMap := (C.int)(Pub_key_size), cgoAllocsUnknown
	cBackup, cBackupAllocMap := unpackPUint8_tString(Backup)
	cBackup_size, cBackup_sizeAllocMap := (C.int)(Backup_size), cgoAllocsUnknown
	__ret := C.MPCCrypto_verifyEcdsaBackupKey(cPub_backup_key, cPub_backup_key_size, cPub_key, cPub_key_size, cBackup, cBackup_size)
	runtime.KeepAlive(cBackup_sizeAllocMap)
	runtime.KeepAlive(cBackupAllocMap)
	runtime.KeepAlive(cPub_key_sizeAllocMap)
	runtime.KeepAlive(cPub_keyAllocMap)
	runtime.KeepAlive(cPub_backup_key_sizeAllocMap)
	runtime.KeepAlive(cPub_backup_keyAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_restoreecdsakey function as declared in include/mpc_crypto.h:150
func Mpccrypto_restoreecdsakey(Prv_backup_key string, Prv_backup_key_size int32, Pub_key string, Pub_key_size int32, Backup string, Backup_size int32, Prv_key []byte, Prv_key_size []int32) int32 {
	cPrv_backup_key, cPrv_backup_keyAllocMap := unpackPUint8_tString(Prv_backup_key)
	cPrv_backup_key_size, cPrv_backup_key_sizeAllocMap := (C.int)(Prv_backup_key_size), cgoAllocsUnknown
	cPub_key, cPub_keyAllocMap := unpackPUint8_tString(Pub_key)
	cPub_key_size, cPub_key_sizeAllocMap := (C.int)(Pub_key_size), cgoAllocsUnknown
	cBackup, cBackupAllocMap := unpackPUint8_tString(Backup)
	cBackup_size, cBackup_sizeAllocMap := (C.int)(Backup_size), cgoAllocsUnknown
	cPrv_key, cPrv_keyAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Prv_key)).Data)), cgoAllocsUnknown
	cPrv_key_size, cPrv_key_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Prv_key_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_restoreEcdsaKey(cPrv_backup_key, cPrv_backup_key_size, cPub_key, cPub_key_size, cBackup, cBackup_size, cPrv_key, cPrv_key_size)
	runtime.KeepAlive(cPrv_key_sizeAllocMap)
	runtime.KeepAlive(cPrv_keyAllocMap)
	runtime.KeepAlive(cBackup_sizeAllocMap)
	runtime.KeepAlive(cBackupAllocMap)
	runtime.KeepAlive(cPub_key_sizeAllocMap)
	runtime.KeepAlive(cPub_keyAllocMap)
	runtime.KeepAlive(cPrv_backup_key_sizeAllocMap)
	runtime.KeepAlive(cPrv_backup_keyAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initbackupeddsakey function as declared in include/mpc_crypto.h:153
func Mpccrypto_initbackupeddsakey(Peer int32, Share []Mpccryptoshare, Pub_backup_key string, Pub_backup_key_size int32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cPub_backup_key, cPub_backup_keyAllocMap := unpackPUint8_tString(Pub_backup_key)
	cPub_backup_key_size, cPub_backup_key_sizeAllocMap := (C.int)(Pub_backup_key_size), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initBackupEddsaKey(cPeer, cShare, cPub_backup_key, cPub_backup_key_size, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cPub_backup_key_sizeAllocMap)
	runtime.KeepAlive(cPub_backup_keyAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getresultbackupeddsakey function as declared in include/mpc_crypto.h:154
func Mpccrypto_getresultbackupeddsakey(Context []Mpccryptocontext, Out []byte, Out_size []int32) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cOut, cOutAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out)).Data)), cgoAllocsUnknown
	cOut_size, cOut_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_getResultBackupEddsaKey(cContext, cOut, cOut_size)
	runtime.KeepAlive(cOut_sizeAllocMap)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_verifyeddsabackupkey function as declared in include/mpc_crypto.h:155
func Mpccrypto_verifyeddsabackupkey(Pub_backup_key string, Pub_backup_key_size int32, Pub_key string, Backup string, Backup_size int32) int32 {
	cPub_backup_key, cPub_backup_keyAllocMap := unpackPUint8_tString(Pub_backup_key)
	cPub_backup_key_size, cPub_backup_key_sizeAllocMap := (C.int)(Pub_backup_key_size), cgoAllocsUnknown
	cPub_key, cPub_keyAllocMap := unpackPUint8_tString(Pub_key)
	cBackup, cBackupAllocMap := unpackPUint8_tString(Backup)
	cBackup_size, cBackup_sizeAllocMap := (C.int)(Backup_size), cgoAllocsUnknown
	__ret := C.MPCCrypto_verifyEddsaBackupKey(cPub_backup_key, cPub_backup_key_size, cPub_key, cBackup, cBackup_size)
	runtime.KeepAlive(cBackup_sizeAllocMap)
	runtime.KeepAlive(cBackupAllocMap)
	runtime.KeepAlive(cPub_keyAllocMap)
	runtime.KeepAlive(cPub_backup_key_sizeAllocMap)
	runtime.KeepAlive(cPub_backup_keyAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_restoreeddsakey function as declared in include/mpc_crypto.h:156
func Mpccrypto_restoreeddsakey(Prv_backup_key string, Prv_backup_key_size int32, Pub_key string, Backup string, Backup_size int32, Out []byte) int32 {
	cPrv_backup_key, cPrv_backup_keyAllocMap := unpackPUint8_tString(Prv_backup_key)
	cPrv_backup_key_size, cPrv_backup_key_sizeAllocMap := (C.int)(Prv_backup_key_size), cgoAllocsUnknown
	cPub_key, cPub_keyAllocMap := unpackPUint8_tString(Pub_key)
	cBackup, cBackupAllocMap := unpackPUint8_tString(Backup)
	cBackup_size, cBackup_sizeAllocMap := (C.int)(Backup_size), cgoAllocsUnknown
	cOut, cOutAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_restoreEddsaKey(cPrv_backup_key, cPrv_backup_key_size, cPub_key, cBackup, cBackup_size, cOut)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cBackup_sizeAllocMap)
	runtime.KeepAlive(cBackupAllocMap)
	runtime.KeepAlive(cPub_keyAllocMap)
	runtime.KeepAlive(cPrv_backup_key_sizeAllocMap)
	runtime.KeepAlive(cPrv_backup_keyAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_initderivebip32 function as declared in include/mpc_crypto.h:159
func Mpccrypto_initderivebip32(Peer int32, Share []Mpccryptoshare, Hardened int32, Index uint32, Context [][]Mpccryptocontext) int32 {
	cPeer, cPeerAllocMap := (C.int)(Peer), cgoAllocsUnknown
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cHardened, cHardenedAllocMap := (C.int)(Hardened), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (C.uint)(Index), cgoAllocsUnknown
	cContext, cContextAllocMap := unpackArgSSMpccryptocontext(Context)
	__ret := C.MPCCrypto_initDeriveBIP32(cPeer, cShare, cHardened, cIndex, cContext)
	packSSMpccryptocontext(Context, cContext)
	runtime.KeepAlive(cContextAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cHardenedAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	runtime.KeepAlive(cPeerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getresultderivebip32 function as declared in include/mpc_crypto.h:160
func Mpccrypto_getresultderivebip32(Context []Mpccryptocontext, New_share [][]Mpccryptoshare) int32 {
	cContext, cContextAllocMap := (*C.MPCCryptoContext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Context)).Data)), cgoAllocsUnknown
	cNew_share, cNew_shareAllocMap := unpackArgSSMpccryptoshare(New_share)
	__ret := C.MPCCrypto_getResultDeriveBIP32(cContext, cNew_share)
	packSSMpccryptoshare(New_share, cNew_share)
	runtime.KeepAlive(cNew_shareAllocMap)
	runtime.KeepAlive(cContextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_getbip32info function as declared in include/mpc_crypto.h:161
func Mpccrypto_getbip32info(Share []Mpccryptoshare, Bip32_info []Bip32_info_t) int32 {
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cBip32_info, cBip32_infoAllocMap := unpackArgSBip32_info_t(Bip32_info)
	__ret := C.MPCCrypto_getBIP32Info(cShare, cBip32_info)
	packSBip32_info_t(Bip32_info, cBip32_info)
	runtime.KeepAlive(cBip32_infoAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Mpccrypto_serializepubbip32 function as declared in include/mpc_crypto.h:162
func Mpccrypto_serializepubbip32(Share []Mpccryptoshare, Out []byte, Out_size []int32) int32 {
	cShare, cShareAllocMap := (*C.MPCCryptoShare)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Share)).Data)), cgoAllocsUnknown
	cOut, cOutAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out)).Data)), cgoAllocsUnknown
	cOut_size, cOut_sizeAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Out_size)).Data)), cgoAllocsUnknown
	__ret := C.MPCCrypto_serializePubBIP32(cShare, cOut, cOut_size)
	runtime.KeepAlive(cOut_sizeAllocMap)
	runtime.KeepAlive(cOutAllocMap)
	runtime.KeepAlive(cShareAllocMap)
	__v := (int32)(__ret)
	return __v
}
